# use for vivaldi

FROM nvidia/cuda:11.1-base-ubuntu20.04

ENV DEBIAN_FRONTEND noninteractive

RUN rm /etc/apt/sources.list.d/cuda.list
RUN rm /etc/apt/sources.list.d/nvidia-ml.list
RUN apt-key del 7fa2af80
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu2004/x86_64/7fa2af80.pub

USER root

# Install some basic utilities
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    sudo \
    gcc \
    git \
    bzip2 \
    libx11-6 \
    apt-utils \
    unzip \
    tar \
    ffmpeg \ 
    libsm6 \
    libxext6 \
    # python3-opencv \
    python3-pip \
    libsvm-dev \
    build-essential \
    libgtk2.0-dev \ 
    pkg-config \ 
    libavcodec-dev \ 
    libavformat-dev \ 
    libswscale-dev \
 && rm -rf /var/lib/apt/lists/*

# Create a working directory
RUN mkdir /app
WORKDIR /app

# Create a non-root user and switch to it
RUN adduser --disabled-password --gecos '' --shell /bin/bash user \
&& chown -R user:user /app
RUN echo "user ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/90-user
USER user

# All users can use /home/user as their home directory
ENV HOME=/home/user
RUN chmod 777 /home/user

# Install Miniconda and Python 3.8
ENV CONDA_AUTO_UPDATE_CONDA=true
ENV PATH=/home/user/miniconda/bin:$PATH
RUN curl -sLo ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-py38_4.8.2-Linux-x86_64.sh \
 && chmod +x ~/miniconda.sh \
 && ~/miniconda.sh -b -p ~/miniconda \
 && rm ~/miniconda.sh \
 && conda install -y python==3.8.1 \
 && conda clean -ya

# create and activate new python environment called 'mayo_retina'
RUN conda create -n mayo_retina python=3.8
RUN echo "source activate mayo_retina" >> ~/.bashrc
RUN /bin/bash -c "source ~/.bashrc"

# install core libraries
RUN pip install scipy
RUN pip install numpy==1.21.2
RUN pip install scikit-learn
RUN pip install pandas
RUN pip install jupyter
RUN pip install h5py
RUN pip install graphviz
RUN pip install pydot
RUN pip install keras
RUN pip install matplotlib
RUN pip install seaborn
RUN pip install joblib
RUN pip install opencv-contrib-python
# RUN pip install -U mne
# RUN pip install -U mne-connectivity
# RUN pip install -U mne_features

# install pytorch + pytorch geometric + pytorch captum
RUN conda install pytorch==1.7.0 torchvision==0.8.0 cudatoolkit=11.0 -c pytorch
RUN pip install torch-scatter==latest+cu110 -f https://pytorch-geometric.com/whl/torch-1.7.0.html
RUN pip install torch-sparse==latest+cu110 -f https://pytorch-geometric.com/whl/torch-1.7.0.html
RUN pip install torch-cluster==latest+cu110 -f https://pytorch-geometric.com/whl/torch-1.7.0.html
RUN pip install torch-spline-conv==latest+cu110 -f https://pytorch-geometric.com/whl/torch-1.7.0.html
RUN pip install torch-geometric
RUN pip install captum
RUN pip install tensorboard
RUN pip install pyfits
RUN pip install torchmetrics

# misc libraries
RUN pip install glob2
RUN pip install flake8
RUN pip install fasteners
RUN pip install psutil
RUN pip install toml
RUN pip install webdataset
RUN pip install black

# lib for working with text labels
# RUN pip install nltk

# # libraries for data loading options
# RUN pip install lmdb
# RUN pip install msgpack
# RUN pip install h5py
# RUN pip install ml-pyxis
# RUN pip install zarr

# libraries for experiment tracking
# RUN pip install tensorboard
# RUN pip install comet_ml
# RUN pip install neptune-client
# RUN pip install comet_ml --upgrade

# for debugging
RUN pip install ipdb

# # for opening .xlsx files
# RUN pip install xlrd
# RUN pip install openpyxl

# for tensor decomposition and PSD modeling
# RUN pip install -U tensorly
# RUN pip install git+https://github.com/ahwillia/tensortools
# RUN pip install fooof
# RUN pip install statsmodels

# RUN pip install tensorflow
RUN pip install -U scikit-image
RUN TMPDIR=/mnt/ssd_4tb_0/huzaifa/tmp/ pip install SimpleITK
RUN pip install --upgrade pip setuptools wheel
RUN CMAKE_ARGS="-DOPENCV_ENABLE_NONFREE=ON" pip install --no-binary=opencv-contrib-python opencv-contrib-python

# Create some command aliases and turn off jupyter notebook tokens
RUN echo 'alias python="/home/user/miniconda/bin/python"' >> /home/user/.bashrc
RUN echo 'alias jp="jupyter notebook --no-browser --ip=0.0.0.0 --port=8893 --allow-root"' >> /home/user/.bashrc
RUN mkdir -p /home/user/.jupyter && echo "c.NotebookApp.token = u'sh3r10ck3d'" >> /home/user/.jupyter/jupyter_notebook_config.py && echo "c.NotebookApp.notebook_dir = '/home/huzaifa'" >> /home/user/.jupyter/jupyter_notebook_config.py

# set environment variables
ENV NUMBA_CACHE_DIR=/tmp/numba_cache
ENV MPLCONFIGDIR=/tmp/matplotlib_cache

# ENV TORCH_HOME=/home/huzaifa/for_sf
# ENV SENTENCE_TRANSFORMERS_HOME=/home/huzaifa/for_sf

# What should we run when the container is launched
ENTRYPOINT ["/bin/bash"]